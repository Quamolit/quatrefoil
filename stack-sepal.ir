{:definitions {"core/render-canvas!" ["defn" "render-canvas!" ["markup" "states-ref" "instants" "scene"] ["let" [["build-mutate" ["fn" ["coord" "new-state"] ["println" "|Mutate states:" "new-state"] ["swap!" "states-ref" "assoc-in" ["conj" "coord" "'data"] "new-state"]]] ["queue!" ["fn" ["coord" "new-instant" "mark"] ["swap!" "instant-variation-ref" "conj" ["[]" "coord" "new-instant" "mark"]]]] ["now" ["js/Date.now"]] ["packed" ["{}" [":build-mutate" "build-mutate"] [":queue!" "queue!"] [":elapsed" ["-" "now" "@timestamp-ref"]]]] ["new-tree" ["render-component" "markup" "@tree-cache-ref" ["[]"] ["get" "@states-ref" [":name" "markup"]] ["get" "instants" [":name" "markup"]] "false" "packed"]]] ["reset!" "timestamp-ref" "now"] ["if" ["some?" "@tree-ref"] ["let" [["changes-ref" ["atom" ["[]"]]] ["collect!" ["fn" ["x"] ["swap!" "changes-ref" "conj" "x"]]]] ["diff-tree" "@tree-ref" "new-tree" ["[]"] "collect!"] ["apply-changes" "@changes-ref"]] ["build-tree" ["[]"] ["purify-tree" "new-tree"]]] ["reset!" "tree-ref" "new-tree"] ["reset!" "tree-cache-ref" "new-tree"] ["--" ".log" "js/console" "|Tree:" "new-tree"] [".log" "js/console" "|Variations" "@instant-variation-ref"]]], "main/dispatch!" ["defn" "dispatch!" ["op" "op-data"] ["let" [["store" ["updater" "@store-ref" "op" "op-data"]]] [".log" "js/console" "|Dispatch:" "op" "op-data" "store"] ["reset!" "store-ref" "store"]]], "dsl.alias/sphere" ["defn" "sphere" ["props" "&" "children"] ["create-element" ":sphere" "props" "children"]], "dsl.render/render-component" ["defn" "render-component" ["markup" "prev-markup" "coord" "states" "instants" "new?" "packed"] ["--" ".log" "js/console" "|Component states:" "states"] ["--" "println" "|Instants:" "coord" "instants"] ["if" ["and" ["nil?" "markup"] ["nil?" "prev-markup"]] ["do" [".warn" "js/console" "|Calling render-component with nil!"] "nil"] ["let" [["elapsed" [":elapsed" "packed"]] ["base-tree" ["or" "markup" "prev-markup"]] ["comp-name" [":name" "base-tree"]] ["args" [":args" "base-tree"]] ["base-coord" ["conj" "coord" [":name" "base-tree"]]] ["render" [":render" "base-tree"]] ["hooks" [":hooks" "base-tree"]] ["init-instant" [":init-instant" "hooks"]] ["on-tick" ["or" [":on-tick" "hooks"] "defaut-tick"]] ["on-unmount" [":on-unmount" "hooks"]] ["on-update" [":on-update" "hooks"]] ["remove?" [":remove?" "hooks"]] ["state" ["get-state" "states" [":init-state" "hooks"] "args"]] ["at-place?" ["and" ["not" "new?"] ["nil?" "prev-markup"]]] ["instant" ["get-instant" "instants" "init-instant" "args" "state" "at-place?" ["some?" "prev-markup"]]] ["build-mutate" [":build-mutate" "packed"]] ["mutate!" ["fn" ["&" "state-args"] ["let" [["update-state" [":update-state" "hooks"]] ["new-state" ["apply" "update-state" ["cons" "state" "state-args"]]]] [".log" "js/console" "|During mutate:" "base-coord" "state" "new-state" "states"] ["build-mutate" "base-coord" "new-state"]]]] ["queue!" [":queue!" "packed"]] ["curry-render" ["apply" "render" "args"]] ["cached-tree" ["if" ["some?" "prev-markup"] [":tree" "prev-markup"] "nil"]] ["render-result" ["fn" ["the-instant" "removing?"] ["let" [["tree-markup" ["curry-render" "state" "mutate!" "the-instant"]] ["tree" ["render-markup" "tree-markup" "cached-tree" "base-coord" "base-coord" "states" "instants" "true" "packed"]]] ["merge" "base-tree" ["{}" [":tree" "tree"] [":states" ["assoc" "states" "'data" "state"]] [":instants" ["assoc" "instants" ":data" "the-instant"]] [":removing?" "removing?"]]]]]]] ["cond" [["and" ["some?" "markup"] ["nil?" "prev-markup"]] ["do" ["if" ["some?" "instant"] ["queue!" "base-coord" "instant" ":init"]] ["render-result" "instant" "false"]]] [["and" ["some?" "markup"] ["some?" "prev-markup"] ["=component?" "prev-markup" "markup"]] ["do" ["--" ".log" "js/console" "|Reusing component:" "coord"] "prev-markup"]] [["and" ["some?" "markup"] ["some?" "prev-markup"]] ["if" ["and" ["fn?" "on-update"] ["updated?" "markup" "prev-markup"]] ["let" [["new-instant" ["on-update" "instant" [":args" "prev-markup"] "args" [":states" "prev-markup"] "state"]]] ["if" ["not=" "instant" "new-instant"] ["do" ["queue!" "base-coord" "new-instant" ":update"] ["render-result" "new-instant" "false"]] ["let" [["ticked-instant" ["on-tick" "instant" "elapsed"]]] ["if" ["not=" "instant" "ticked-instant"] ["queue!" "base-coord" "ticked-instant" ":tick-on-update"]] ["render-result" "ticked-instant" "false"]]]] ["let" [["new-instant" ["on-tick" "instant" "elapsed"]]] ["if" ["not=" "instant" "new-instant"] ["queue!" "base-coord" "new-instant" ":tick"]] ["render-result" "new-instant" "false"]]]] [["and" ["nil?" "markup"] ["some?" "prev-markup"] [":removing?" "prev-markup"]] ["let" [["new-instant" ["on-tick" "instant" "elapsed"]]] ["if" ["remove?" "new-instant"] "nil" ["do" ["queue!" "base-coord" "new-instant" ":removing"] ["render-result" "new-instant" "true"]]]]] [["and" ["nil?" "markup"] ["some?" "prev-markup"] ["not" [":removing?" "prev-markup"]]] ["if" ["fn?" "on-unmount"] ["let" [["new-instant" ["on-unmount" "instant"]]] ["queue!" "base-coord" "new-instant" ":unmount"] ["render-result" "new-instant" "true"]] "nil"]] [":else" ["do" [".warn" "js/console" "|Unexpected case:" "markup" "prev-markup"]]]]]]], "dsl.render/render-shape" ["defn" "render-shape" ["markup" "prev-markup" "coord" "comp-coord" "states" "instants" "new?" "packed"] ["let" [["prev-children" [":children" "prev-markup"]] ["children" [":children" "markup"]] ["all-keys" ["set/union" ["into" ["#{}"] ["keys" "prev-children"]] ["into" ["#{}"] ["keys" "children"]]]]] ["--" ".log" "js/console" "|Shape:" "markup"] ["->" "markup" ["assoc" ":coord" "coord"] ["assoc" ":children" ["->>" "all-keys" ["map" ["fn" ["k"] ["[]" "k" ["let" [["child" ["get" "children" "k"]] ["prev-child" ["get" "prev-children" "k"]]] ["if" ["and" ["nil?" "child"] ["nil?" "prev-child"]] "nil" ["render-markup" "child" "prev-child" ["conj" "coord" "k"] "comp-coord" ["get" "states" "k"] ["get" "instants" "k"] "new?" "packed"]]]]]] ["filter" ["fn" ["entry"] ["--" ".log" "js/console" "|Rendering child:" "entry"] ["some?" ["last" "entry"]]]] ["into" ["{}"]]]]]]], "dsl.alias/group" ["defn" "group" ["props" "&" "children"] ["create-element" ":group" "props" "children"]], "main/-main!" ["defn" "-main!" [] ["enable-console-print!"] ["devtools/install!"] ["if" ["not" ["empty?" "ssr-stages"]] ["let" [["target" [".querySelector" "js/document" "|#app"]]] ["falsify-stage!" "target" ["render-element" ["comp-container" "@store-ref" "ssr-stages"] "states-ref"] "dispatch!"]]] ["render-app!"] ["let" [["canvas-el" ["js/document.querySelector" "|canvas"]]] ["reset!" "renderer-ref" ["js/THREE.WebGLRenderer." ["clj->js" ["{}" [":canvas" "canvas-el"] [":antialias" "true"]]]]] [".setPixelRatio" "@renderer-ref" ["or" "js/window.devicePixelRatio" "1"]] [".addEventListener" "canvas-el" "|click" ["fn" ["event"] ["on-canvas-click" "event" "dispatch!" "tree-ref"]]]] [".setSize" "@renderer-ref" "js/window.innerWidth" "js/window.innerHeight"] ["render-canvas-app!"] ["add-watch" "store-ref" ":changes" "render-canvas-app!"] ["add-watch" "states-ref" ":changes" "render-canvas-app!"] ["println" "|App started!"]], "dsl.object3d-dom/camera-ref" ["defonce" "camera-ref" ["atom" "nil"]], "dsl.render/get-instant" ["defn" "get-instant" ["instants" "init-instant" "args" "state" "at-place?" "has-prev?"] ["if" ["and" "has-prev?" ["contains?" "instants" "'data"]] ["get" "instants" "'data"] ["if" ["fn?" "init-instant"] ["init-instant" "args" "state" "at-place?"] "nil"]]], "comp.fade-in-out/on-update" ["defn" "on-update" ["instant" "old-args" "args" "old-state" "state"] "instant"], "dsl.alias/point-light" ["defn" "point-light" ["props" "&" "children"] ["create-element" ":point-light" "props" "children"]], "main/on-jsload!" ["defn" "on-jsload!" [] ["clear-cache!"] ["render-canvas-app!"] ["println" "|Code updated."]], "comp.canvas/comp-canvas" ["def" "comp-canvas" ["create-comp" ":canvas" ["{}" [":init-state" "init-state"] [":update-state" "update-state"]] ["fn" ["store"] ["fn" ["state" "mutate!" "instant"] ["scene" ["{}"] ["case" "state" [":portal" ["comp-portal" "mutate!"]] [":todolist" ["comp-todolist" [":tasks" "store"]]] [":demo" ["comp-demo"]] "nil"] ["if" ["not=" "state" ":portal"] ["comp-fade-in-out" ["comp-back" "mutate!"]]] ["point-light" ["{}" [":params" ["{}" [":color" "0xffffff"] [":x" "20"] [":y" "40"] [":z" "100"] [":intensity" "2"] [":distance" "400"]]]]] ["perspective-camera" ["{}" [":params" ["{}" [":x" "0"] [":y" "0"] [":z" "200"] [":fov" "45"] [":aspect" ["/" "js/window.innerWidth" "js/window.innerHeight"]] [":near" "0.1"] [":far" "1000"]]]]]]]]]], "updater.core/updater" ["defn" "updater" ["store" "op" "op-data"] ["case" "op" [":add-task" ["update" "store" ":tasks" ["fn" ["tasks"] ["let" [["id" ["js/Date.now"]]] ["assoc" "tasks" "id" ["{}" [":id" "id"] [":text" "op-data"] [":done?" "false"]]]]]]] [":delete-task" ["update" "store" ":tasks" ["fn" ["tasks"] ["dissoc" "tasks" "op-data"]]]] [":toggle-task" ["update" "store" ":tasks" ["fn" ["tasks"] ["update-in" "tasks" ["[]" "op-data" ":done?"] "not"]]]] [":edit-task" ["update" "store" ":tasks" ["fn" ["tasks"] ["assoc-in" "tasks" ["[]" ["first" "op-data"] ":text"] ["last" "op-data"]]]]] "store"]], "main/render-app!" ["defn" "render-app!" [] ["let" [["target" [".querySelector" "js/document" "|#app"]]] ["render!" ["comp-container" "@store-ref"] "target" "dispatch!" "states-ref"]]], "dsl.object3d-dom/create-perspective-camera" ["defn" "create-perspective-camera" ["params"] ["let" [["fov" [":fov" "params"]] ["aspect" [":aspect" "params"]] ["near" [":near" "params"]] ["far" [":far" "params"]] ["object3d" ["js/THREE.PerspectiveCamera." "fov" "aspect" "near" "far"]]] [".set" "object3d.position" [":x" "params"] [":y" "params"] [":z" "params"]] ["reset!" "camera-ref" "object3d"] "object3d"]], "core/tree-cache-ref" ["defonce" "tree-cache-ref" ["atom" "nil"]], "dsl.patch/add-element" ["defn" "add-element" ["coord" "op-data"] ["if" ["empty?" "coord"] [".warn" "js/console" "|Cannot add element with empty coord!"] ["let" [["target" ["reach-object3d" "global-scene" ["butlast" "coord"]]]] [".addBy" "target" ["last" "coord"] ["build-tree" "coord" "op-data"]]]]], "dsl.object3d-dom/build-tree" ["defn" "build-tree" ["coord" "tree"] ["let" [["object3d" ["create-element" ["dissoc" "tree" ":children"]]] ["children" ["->>" [":children" "tree"] ["map" ["fn" ["entry"] ["update" "entry" "1" ["fn" ["child"] ["build-tree" ["conj" "coord" ["first" "entry"]] "child"]]]]] ["into" ["{}"]]]] ["virtual-element" ["{}" [":object3d" "object3d"] [":children" "children"]]]] ["doseq" ["[]" "entry" "children"] ["let" [["child" ["last" "entry"]]] ["--" ".log" "js/console" "|Child:" "child" "entry"] [".addBy" "object3d" ["first" "entry"] "child"]]] ["swap!" "virtual-tree-ref" "assoc-in" ["conj" "coord" "'data"] "virtual-element"] "object3d"]], "main/ref-task" ["defonce" "ref-task" ["atom" "nil"]], "dsl.object3d-dom/create-text-element" ["defn" "create-text-element" ["params" "material"] ["let" [["geometry" ["js/THREE.TextGeometry." ["or" [":text" "params"] "|Quatrefoil"] ["clj->js" ["assoc" "params" ":font" "@font-ref"]]]] ["object3d" ["js/THREE.Mesh." "geometry" ["create-material" "material"]]]] [".set" "object3d.position" [":x" "params"] [":y" "params"] [":z" "params"]] "object3d"]], "core/instant-variation-ref" ["defonce" "instant-variation-ref" ["atom" ["[]"]]], "dsl.patch/apply-changes" ["defn" "apply-changes" ["changes"] ["doseq" ["[]" "change" "changes"] ["let" [[["[]" "coord" "op" "op-data"] "change"]] ["--" ".log" "js/console" "|Change:" "op" "coord"] ["case" "op" [":add-material" ["update-material" "coord" "op-data"]] [":update-material" ["update-material" "coord" "op-data"]] [":remove-children" ["remove-children" "coord" "op-data"]] [":add-children" ["add-children" "coord" "op-data"]] [":update-params" ["update-params" "coord" "op-data"]] [":add-params" ["update-params" "coord" "op-data"]] [":add-element" ["add-element" "coord" "op-data"]] [":remove-element" ["remove-element" "coord"]] [":replace-element" ["replace-element" "coord" "op-data"]] ["do" [".log" "js/console" "|Unknown op:" "op"]]]]]], "dsl.diff/diff-params" ["defn" "diff-params" ["prev-params" "params" "coord" "collect!"] ["let" [["prev-keys" ["into" ["#{}"] ["keys" "prev-params"]]] ["curr-keys" ["into" ["#{}"] ["keys" "params"]]] ["added-params" ["set/difference" "curr-keys" "prev-keys"]] ["removed-params" ["into" ["#{}"] ["set/difference" "prev-keys" "curr-keys"]]] ["common-keys" ["set/intersection" "prev-keys" "curr-keys"]] ["changed-params" ["->>" "common-keys" ["filter" ["fn" ["k"] ["not=" ["get" "prev-params" "k"] ["get" "params" "k"]]]] ["map" ["fn" ["k"] ["[]" "k" ["get" "params" "k"]]]] ["into" ["{}"]]]]] ["if" ["not" ["empty?" "removed-params"]] ["collect!" ["[]" "coord" ":remove-params" "removed-params"]]] ["if" ["not" ["empty?" "added-params"]] ["collect!" ["[]" "coord" ":add-params" ["select-keys" "params" "added-params"]]]] ["if" ["not" ["empty?" "changed-params"]] ["collect!" ["[]" "coord" ":update-params" "changed-params"]]]]], "dsl.render/updated?" ["defn" "updated?" ["markup" "prev-tree"] ["and" ["not" ["identical?" [":args" "markup"] [":args" "prev-tree"]]] ["not" ["identical?" [":states" "markup"] [":states" "prev-tree"]]]]], "dsl.alias/perspective-camera" ["defn" "perspective-camera" ["props" "&" "children"] ["create-element" ":perspective-camera" "props" "children"]], "dsl.object3d-dom/create-sphere-element" ["defn" "create-sphere-element" ["params" "material" "event" "comp-coord"] ["let" [["geometry" ["js/THREE.SphereGeometry." ["or" [":radius" "params"] "8"] ["or" [":width-segments" "params"] "32"] ["or" [":height-segments" "params"] "32"]]] ["object3d" ["js/THREE.Mesh." "geometry" ["create-material" "material"]]]] [".set" "object3d.position" [":x" "params"] [":y" "params"] [":z" "params"]] [".set" "object3d.scale" ["scale-zero" [":scale-x" "params"]] ["scale-zero" [":scale-y" "params"]] ["scale-zero" [":scale-y" "params"]]] ["set!" "object3d.coord" "comp-coord"] ["--" ".log" "js/console" "|Sphere:" "object3d"] "object3d"]], "dsl.alias/create-comp" ["defn" "create-comp" ["comp-name" "hooks" "render"] ["fn" ["&" "args"] ["Component." "comp-name" "args" ["{}"] ["{}"] "render" "nil" "hooks" "false"]]], "dsl.alias/text" ["defn" "text" ["props" "&" "children"] ["create-element" ":text" "props" "children"]], "util.core/reach-object3d" ["defn" "reach-object3d" ["object3d" "coord"] ["if" ["empty?" "coord"] "object3d" ["let" [["cursor" ["first" "coord"]]] ["recur" [".reachBy" "object3d" "cursor"] ["rest" "coord"]]]]], "dsl.alias/create-element" ["defn" "create-element" ["el-name" "props" "children"] ["Shape." "el-name" [":params" "props"] [":material" "props"] [":event" "props"] ["arrange-children" "children"] "nil"]], "dsl.object3d-dom/virtual-tree-ref" ["defonce" "virtual-tree-ref" ["atom" ["{}"]]], "comp.canvas/comp-demo" ["def" "comp-demo" ["create-comp" ":demo" ["{}" [":init-state" ["fn" ["&" "args"] "0"]] [":update-state" ["fn" ["state" "x"] ["inc" "state"]]]] ["fn" [] ["fn" ["state" "mutate!" "instant"] ["group" ["{}"] ["box" ["{}" [":params" ["{}" [":width" "16"] [":height" "4"] [":depth" "6"] [":x" "-40"] [":y" "0"] [":z" "0"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":color" "0x808080"] [":opacity" "0.6"]]] [":event" ["{}" [":click" ["fn" ["event" "dispatch!"] [".log" "js/console" "|Click:" "event"] ["dispatch!" ":demo" "nil"] ["mutate!" "|Mutate demo"]]]]]]] ["sphere" ["{}" [":params" ["{}" [":radius" "8"] [":x" "10"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":opacity" "0.6"] [":color" "0x9050c0"]]] [":event" ["{}" [":click" ["fn" ["event" "dispatch!"] [".log" "js/console" "|Click:" "event"] ["dispatch!" ":canvas" "nil"]]]]]]] ["group" ["{}"] ["text" ["{}" [":params" ["{}" [":text" "|Quatrefoil"] [":size" "4"] [":height" "2"] [":z" "20"] [":x" "-30"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":color" "0xffcccc"]]]]]]]]]]], "core/clear-cache!" ["defn" "clear-cache!" [] ["reset!" "tree-cache-ref" "nil"]], "dsl.object3d-dom/default-params" ["def" "default-params" ["{}" [":x" "0"] [":y" "0"] [":z" "0"] [":scale-x" "1"] [":scale-y" "1"] [":scale-z" "1"]]], "comp.back/comp-back" ["def" "comp-back" ["create-comp" ":back" ["{}"] ["fn" ["mutate-view!"] ["fn" ["state" "mutate!" "instant"] ["box" ["{}" [":params" ["{}" [":width" "16"] [":height" "4"] [":depth" "6"] [":x" "60"] [":y" "30"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":color" "0x808080"] [":opacity" "0.6"]]] [":event" ["{}" [":click" ["fn" ["event" "dispatch!"] ["mutate-view!" ":portal"]]]]]] ["text" ["{}" [":params" ["{}" [":text" "|Back"] [":size" "4"] [":height" "2"] [":z" "10"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":color" "0xffcccc"]]]]]]]]]], "util.core/purify-tree" ["defn" "purify-tree" ["tree"] ["if" ["comp?" "tree"] ["recur" [":tree" "tree"]] ["update" "tree" ":children" ["fn" ["children"] ["->>" "children" ["map" ["fn" ["entry"] ["update" "entry" "1" ["fn" ["child"] ["purify-tree" "child"]]]]] ["into" ["{}"]]]]]]], "comp.todolist/comp-todolist" ["def" "comp-todolist" ["create-comp" ":todolist" ["{}"] ["fn" ["tasks"] ["fn" ["state" "mutate!" "instant"] ["group" ["{}"] ["group" ["{}" [":params" ["{}" [":y" "40"] [":x" "0"] [":z" "0"]]]] ["box" ["{}" [":params" ["{}" [":width" "32"] [":height" "6"] [":depth" "1"] [":opacity" "0.5"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":color" "0xffaaaa"]]] [":event" ["{}" [":click" ["fn" ["event" "dispatch!"] ["dispatch!" ":add-task" ["js/prompt" "|Task content?"]]]]]]]]] ["group" ["{}" [":params" ["{}" [":y" "30"] [":x" "0"] [":z" "0"]]]] ["->>" ["vals" "tasks"] ["map-indexed" ["fn" ["idx" "task"] ["[]" [":id" "task"] ["comp-task" "task" "idx"]]]] ["into" ["{}"]]]]]]]]], "util.core/=component?" ["defn" "=component?" ["prev-tree" "markup"] ["let" [["prev-args" [":args" "prev-tree"]] ["prev-states" [":states" "prev-tree"]] ["prev-instants" [":instants" "prev-tree"]]] ["--" "println" ["=seq?" [":args" "markup"] "prev-args"] ["identical?" [":states" "markup"] "prev-states"] ["identical?" [":instants" "markup"] "prev-instants"]] ["and" ["=seq?" [":args" "markup"] "prev-args"] ["identical?" [":states" "markup"] "prev-states"] ["identical?" [":instants" "markup"] "prev-instants"]]]], "comp.todolist/comp-task" ["def" "comp-task" ["create-comp" ":task" ["{}"] ["fn" ["task" "idx"] ["fn" ["state" "mutate" "instant"] ["group" ["{}" [":params" ["{}" [":x" "0"] [":y" ["*" "idx" "-8"]]]]] ["sphere" ["{}" [":params" ["{}" [":radius" "2"] [":x" "-20"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":opacity" "0.3"] [":color" ["if" [":done?" "task"] "0x905055" "0x9050ff"]]]] [":event" ["{}" [":click" ["fn" ["event" "dispatch!"] ["dispatch!" ":toggle-task" [":id" "task"]]]]]]]] ["box" ["{}" [":params" ["{}" [":width" "32"] [":height" "4"] [":depth" "1"] [":opacity" "0.5"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":color" "0xcccccc"]]] [":event" ["{}" [":click" ["fn" ["event" "dispatch!"] ["dispatch!" ":edit-task" ["[]" [":id" "task"] ["js/prompt" "|New task:" [":text" "task"]]]]]]]]] ["text" ["{}" [":params" ["{}" [":text" [":text" "task"]] [":size" "3"] [":height" "2"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":color" "0xffcccc"]]]]]] ["sphere" ["{}" [":params" ["{}" [":radius" "2"] [":x" "30"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":opacity" "0.3"] [":color" "0xff5050"]]] [":event" ["{}" [":click" ["fn" ["event" "dispatch!"] ["dispatch!" ":delete-task" [":id" "task"]]]]]]]]]]]]], "dsl.patch/add-children" ["defn" "add-children" ["coord" "op-data"] ["let" [["target" ["reach-object3d" "global-scene" "coord"]]] ["doseq" ["[]" "entry" "op-data"] ["let" [[["[]" "k" "tree"] "entry"]] [".addBy" "target" "k" ["build-tree" ["conj" "coord" "k"] "tree"]]]]]], "util.core/=seq?" ["defn" "=seq?" ["xs" "ys"] ["let" [["xs-empty?" ["empty?" "xs"]] ["ys-empty?" ["empty?" "ys"]]] ["if" "xs-empty?" "ys-empty?" ["if" "ys-empty?" "false" ["if" ["identical?" ["first" "xs"] ["first" "ys"]] ["recur" ["rest" "xs"] ["rest" "ys"]] "false"]]]]], "dsl.object3d-dom/create-element" ["defn" "create-element" ["element"] ["--" ".log" "js/console" "|Element:" "element" [":coord" "element"]] ["let" [["params" ["merge" "default-params" [":params" "element"]]] ["material" ["or" [":material" "element"] ["{}" [":kind" ":mesh-basic"] [":color" "0xa0a0a0"]]]] ["event" [":event" "element"]] ["coord" [":coord" "element"]]] ["case" [":name" "element"] [":scene" "global-scene"] [":group" ["create-group-element" "params"]] [":box" ["create-box-element" "params" "material" "event" "coord"]] [":sphere" ["create-sphere-element" "params" "material" "event" "coord"]] [":point-light" ["create-point-light" "params"]] [":perspective-camera" ["create-perspective-camera" "params"]] [":text" ["create-text-element" "params" "material"]] ["do" [".warn" "js/console" "|Unknown element" "element"] ["js/THREE.Object3D."]]]]], "dsl.object3d-dom/global-scene" ["defonce" "global-scene" ["js/THREE.Scene."]], "main/ssr-stages" ["def" "ssr-stages" ["let" [["ssr-element" [".querySelector" "js/document" "|#ssr-stages"]] ["ssr-markup" [".getAttribute" "ssr-element" "|content"]]] ["read-string" "ssr-markup"]]], "dsl.object3d-dom/ref-dirty-call!" ["defonce" "ref-dirty-call!" ["atom" "nil"]], "comp.fade-in-out/on-unmount" ["defn" "on-unmount" ["instant"] ["{}" [":presence" "1000"] [":presence-v" "-1"]]], "main/render-canvas-app!" ["defn" "render-canvas-app!" [] ["if" ["some?" "@ref-task"] ["do" ["js/clearTimeout" "@ref-task"] ["reset!" "ref-task" "nil"]]] ["--" "println" "|Render app:" ["pr-str" "@instants-ref"]] ["render-canvas!" ["comp-canvas" "@store-ref"] "states-ref" "@instants-ref" "global-scene"] [".render" "@renderer-ref" "global-scene" "@camera-ref"] ["if" ["not" ["empty?" "@instant-variation-ref"]] ["do" ["write-instants!" "instants-ref" "@instant-variation-ref"] ["reset!" "instant-variation-ref" ["[]"]] ["reset!" "ref-task" ["js/requestAnimationFrame" ["fn" [] ["reset!" "ref-task" "nil"] ["render-canvas-app!"]] "40"]]]]], "comp.container/comp-container" ["def" "comp-container" ["create-comp" ":container" ["fn" ["store"] ["fn" ["state" "mutate!"] ["div" ["{}" [":style" ["merge" "ui/global"]]] ["canvas" ["{}" [":attrs" ["{}" [":id" "|canvas"] [":width" "js/window.innerWidth"] [":height" "js/window.innerHeight"]]] [":style" ["{}"]]]]]]]]], "dsl.patch/remove-element" ["defn" "remove-element" ["coord"] ["if" ["empty?" "coord"] [".warn" "js/console" "|Cannot remove by empty coord!"] ["let" [["target" ["reach-object3d" "global-scene" ["butlast" "coord"]]]] [".removeBy" "target" ["last" "coord"]]]]], "dsl.patch/replace-element" ["defn" "replace-element" ["coord" "op-data"] ["if" ["empty?" "coord"] [".warn" "js/console" "|Cannot replace with empty coord!"] ["let" [["target" ["reach-object3d" "global-scene" ["butlast" "coord"]]]] [".replaceBy" "target" ["last" "coord"] ["build-tree" "coord" "op-data"]]]]], "dsl.diff/diff-children" ["defn" "diff-children" ["prev-children" "children" "coord" "collect!"] ["let" [["prev-keys" ["into" ["#{}"] ["keys" "prev-children"]]] ["curr-keys" ["into" ["#{}"] ["keys" "children"]]] ["removed-keys" ["set/difference" "prev-keys" "curr-keys"]] ["added-children" ["->>" ["set/difference" "curr-keys" "prev-keys"] ["map" ["fn" ["k"] ["[]" "k" ["purify-tree" ["get" "children" "k"]]]]]]] ["common-keys" ["set/intersection" "prev-keys" "curr-keys"]]] ["if" ["not" ["empty?" "removed-keys"]] ["collect!" ["[]" "coord" ":remove-children" "removed-keys"]]] ["if" ["not" ["empty?" "added-children"]] ["collect!" ["[]" "coord" ":add-children" "added-children"]]] ["--" ".log" "js/console" "|Common keys to diff:" "common-keys" "prev-children" "children"] ["doall" ["doseq" ["[]" "k" "common-keys"] ["--" ".log" "js/console" "|Diffing children:" "coord" "common-keys"] ["let" [["prev-child" ["get" "prev-children" "k"]] ["child" ["get" "children" "k"]]] ["if" ["not" ["identical?" "prev-child" "child"]] ["diff-tree" "prev-child" "child" ["conj" "coord" "k"] "collect!"]]]]]]], "main/store-ref" ["defonce" "store-ref" ["atom" ["{}" [":tasks" ["{}" ["100" ["{}" [":id" "100"] [":text" "|Initial task"] [":done?" "false"]]]]]]]], "comp.fade-in-out/on-tick" ["defn" "on-tick" ["instant" "elapsed"] ["let" [["next-presence" ["+" [":presence" "instant"] ["*" "elapsed" [":presence-v" "instant"]]]]] [".log" "js/console" "|Next presence:" "next-presence" "elapsed" [":presence-v" "instant"]] ["if" ["<=" "next-presence" "0"] ["{}" [":presence" "0"] [":presence-v" "0"]] ["if" [">=" "next-presence" "1000"] ["{}" [":presence" "1000"] [":presence-v" "0"]] ["assoc" "instant" ":presence" "next-presence"]]]]], "dsl.patch/update-material" ["defn" "update-material" ["coord" "op-data"] ["println" "|Update material" "coord" "op-data"] ["let" [["target" ["reach-object3d" "global-scene" "coord"]]] ["--" ".log" "js/console" "target"] ["doseq" ["[]" "entry" "op-data"] ["let" [[["[]" "param" "new-value"] "entry"]] ["case" "param" [":color" [".set" "target.material.color" "new-value"]] ["do" [".log" "js/console" "|Unknown param:" "param"]]]]]]], "comp.fade-in-out/remove?" ["defn" "remove?" ["instant"] ["<=" [":presence" "instant"] "0"]], "dsl.render/defaut-tick" ["defn" "defaut-tick" ["instant" "elapsed"] "instant"], "types/Component" ["defrecord" "Component" ["name" "args" "states" "instants" "render" "tree" "hooks" "removing?"]], "dsl.object3d-dom/on-canvas-click" ["defn" "on-canvas-click" ["event" "dispatch!" "tree-ref"] ["let" [["mouse" ["js/THREE.Vector2."]] ["raycaster" ["js/THREE.Raycaster."]]] ["set!" "mouse.x" ["dec" ["*" "2" ["/" "event.clientX" "js/window.innerWidth"]]]] ["set!" "mouse.y" ["-" "1" ["*" "2" ["/" "event.clientY" "js/window.innerHeight"]]]] [".setFromCamera" "raycaster" "mouse" "@camera-ref"] ["let" [["intersects" [".intersectObjects" "raycaster" ["let" [["children" ["clj->js" ["[]"]]] ["collect!" ["fn" ["x"] [".push" "children" "x"]]]] ["collect-children" "global-scene" "collect!"] "children"]]] ["maybe-target" ["aget" "intersects" "0"]]] [".log" "js/console" "intersects"] ["if" ["some?" "maybe-target"] ["let" [["coord" "maybe-target.object.coord"] ["target-el" ["find-element" "@tree-ref" "coord"]] ["maybe-handler" [":click" [":event" "target-el"]]]] ["if" ["some?" "maybe-handler"] ["maybe-handler" "event" "dispatch!"] ["println" "|Found no handler for" "coord"]]]]]]], "comp.canvas/init-state" ["defn" "init-state" ["&" "args"] ":portal"], "dsl.render/render-markup" ["defn" "render-markup" ["markup" "prev-markup" "coord" "comp-coord" "states" "instants" "new?" "packed"] ["cond" [["and" ["nil?" "markup"] ["nil?" "prev-markup"]] "nil"] [["and" ["comp?" "markup"] ["or" ["nil?" "prev-markup"] ["shape?" "prev-markup"]]] ["let" [["k" [":name" "markup"]] ["child-states" ["get" "states" "k"]] ["child-instants" ["get" "instants" "k"]]] ["render-component" "markup" "nil" "coord" "child-states" "child-instants" "new?" "packed"]]] [["and" ["comp?" "prev-markup"] ["nil?" "markup"]] ["let" [["k" [":name" "prev-markup"]] ["child-states" ["get" "states" "k"]] ["child-instants" ["get" "instants" "k"]]] ["render-component" "nil" "prev-markup" "coord" "child-states" "child-instants" "new?" "packed"]]] [["and" ["comp?" "prev-markup"] ["comp?" "markup"] ["=" [":name" "prev-markup"] [":name" "markup"]]] ["let" [["k" [":name" "markup"]] ["child-states" ["get" "states" "k"]] ["child-instants" ["get" "instants" "k"]]] ["render-component" "markup" "prev-markup" "coord" "child-states" "child-instants" "new?" "packed"]]] [["and" ["comp?" "prev-markup"] ["comp?" "markup"] ["not=" [":name" "prev-markup"] [":name" "markup"]]] ["let" [["k" [":name" "markup"]] ["child-states" ["get" "states" "k"]] ["child-instants" ["get" "instants" "k"]]] ["render-component" "markup" "nil" "coord" "child-states" "child-instants" "new?" "packed"]]] [["and" ["shape?" "markup"] ["or" ["nil?" "prev-markup"] ["comp?" "prev-markup"]]] ["render-shape" "markup" "nil" "coord" "comp-coord" "states" "instants" "new?" "packed"]] [["and" ["shape?" "markup"] ["shape?" "prev-markup"]] ["render-shape" "markup" "prev-markup" "coord" "comp-coord" "states" "instants" "new?" "packed"]] [["and" ["nil?" "markup"] ["shape?" "prev-markup"]] "nil"] [":else" ["do" [".log" "js/console" "|Unknown markup with" "markup" "prev-markup"] "nil"]]]], "dsl.alias/arrange-children" ["defn" "arrange-children" ["children"] ["let" [["cursor" ["first" "children"]] ["result" ["if" ["and" ["=" "1" ["count" "children"]] ["not" ["or" ["comp?" "cursor"] ["shape?" "cursor"]]]] ["->>" "cursor" ["filter" ["fn" ["entry"] ["some?" ["last" "entry"]]]] ["into" ["{}"]]] ["->>" "children" ["map-indexed" "vector"] ["filter" ["fn" ["entry"] ["some?" ["last" "entry"]]]] ["into" ["{}"]]]]]] ["--" ".log" "js/console" "|Handle children:" "children" "result"] "result"]], "util.core/comp?" ["defn" "comp?" ["x"] ["=" "Component" ["type" "x"]]], "comp.portal/comp-portal" ["def" "comp-portal" ["create-comp" ":portal" ["{}"] ["fn" ["mutate-view!"] ["fn" ["state" "mutate!" "instant"] ["group" ["{}"] ["box" ["{}" [":params" ["{}" [":width" "16"] [":height" "4"] [":depth" "6"] [":x" "-40"] [":y" "30"] [":z" "0"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":color" "0xccc80"] [":opacity" "0.6"]]] [":event" ["{}" [":click" ["fn" ["event" "dispatch!"] [".log" "js/console" "|Click:" "event"] ["mutate-view!" ":todolist"]]]]]] ["text" ["{}" [":params" ["{}" [":text" "|Todolist"] [":size" "4"] [":height" "2"] [":z" "40"] [":x" "0"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":color" "0xffcccc"]]]]]] ["box" ["{}" [":params" ["{}" [":width" "16"] [":height" "4"] [":depth" "6"] [":x" "0"] [":y" "30"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":color" "0xccc80"] [":opacity" "0.6"]]] [":event" ["{}" [":click" ["fn" ["event" "dispatch!"] [".log" "js/console" "|Click:" "event"] ["mutate-view!" ":demo"]]]]]] ["text" ["{}" [":params" ["{}" [":text" "|Demo"] [":size" "4"] [":height" "2"] [":z" "40"] [":x" "0"]]] [":material" ["{}" [":kind" ":mesh-lambert"] [":color" "0xffcccc"]]]]]]]]]]], "dsl.alias/box" ["defn" "box" ["props" "&" "children"] ["create-element" ":box" "props" "children"]], "dsl.patch/remove-children" ["defn" "remove-children" ["coord" "op-data"] ["let" [["target" ["reach-object3d" "global-scene" "coord"]]] ["doseq" ["[]" "child-key" "op-data"] [".removeBy" "target" "child-key"]]]], "util.core/scale-zero" ["defn" "scale-zero" ["x"] ["if" ["zero?" "x"] "0.01" "x"]], "dsl.object3d-dom/create-material" ["defn" "create-material" ["material"] ["case" [":kind" "material"] [":line-basic" ["js/THREE.LineBasicMaterial." ["clj->js" ["dissoc" "material" ":kind"]]]] [":mesh-basic" ["js/THREE.MeshBasicMaterial." ["clj->js" ["dissoc" "material" ":kind"]]]] [":mesh-lambert" ["js/THREE.MeshLambertMaterial." ["clj->js" ["dissoc" "material" ":kind"]]]] ["do" [".warn" "js/console" "|Unknown material:" "material"] ["js/THREE.LineBasicMaterial." ["clj->js" ["dissoc" "material" ":kind"]]]]]], "comp.fade-in-out/comp-fade-in-out" ["def" "comp-fade-in-out" ["create-comp" ":fade-in-out" ["{}" [":init-instant" "init-instant"] [":on-update" "on-update"] [":on-unmount" "on-unmount"] [":on-tick" "on-tick"] [":remove?" "remove?"]] ["fn" ["inside"] ["fn" ["state" "mutate!" "instant"] ["println" "|Fading:" "instant"] ["let" [["ratio" ["/" [":presence" "instant"] "1000"]]] ["group" ["{}" [":params" ["{}" [":scale-x" "ratio"] [":scale-y" "ratio"] [":scale-z" "ratio"]]]] "inside"]]]]]], "core/write-instants!" ["defn" "write-instants!" ["instants-ref" "changes"] ["doseq" ["[]" "change" "changes"] ["let" [[["[]" "coord" "new-instant" "mark"] "change"]] ["swap!" "instants-ref" "assoc-in" ["conj" "coord" "'data"] "new-instant"]]]], "util.core/find-element" ["defn" "find-element" ["tree" "comp-coord"] ["--" ".log" "js/console" "|Find..." "tree" "comp-coord"] ["if" ["empty?" "comp-coord"] "tree" ["let" [["cursor" ["first" "comp-coord"]]] ["if" ["comp?" "tree"] ["if" ["=" "cursor" [":name" "tree"]] ["recur" [":tree" "tree"] ["rest" "comp-coord"]] "nil"] ["if" ["contains?" [":children" "tree"] "cursor"] ["recur" ["get-in" "tree" ["[]" ":children" "cursor"]] ["rest" "comp-coord"]] "nil"]]]]], "types/Shape" ["defrecord" "Shape" ["name" "params" "material" "event" "children" "coord"]], "comp.canvas/update-state" ["defn" "update-state" ["state" "new-state"] "new-state"], "dsl.diff/diff-events" ["defn" "diff-events" ["prev-events" "events" "coord" "collect!"] ["let" [["prev-event-names" ["into" ["#{}"] ["keys" "prev-events"]]] ["event-names" ["into" ["#{}"] ["keys" "events"]]] ["added-events" ["set/difference" "event-names" "prev-event-names"]] ["removed-events" ["set/difference" "prev-event-names" "event-names"]]] ["if" ["not" ["empty?" "added-events"]] ["collect!" ["[]" "coord" ":add-events" "added-events"]]] ["if" ["not" ["empty?" "removed-events"]] ["collect!" ["[]" "coord" ":remove-events" "removed-events"]]]]], "dsl.object3d-dom/create-group-element" ["defn" "create-group-element" ["params"] ["let" [["object3d" ["js/THREE.Group."]]] [".set" "object3d.position" [":x" "params"] [":y" "params"] [":z" "params"]] [".set" "object3d.scale" [":scale-x" "params"] [":scale-y" "params"] [":scale-y" "params"]] "object3d"]], "comp.fade-in-out/init-instant" ["defn" "init-instant" ["args" "state" "at-place?"] ["{}" [":presence" "0"] [":presence-v" "1"]]], "dsl.diff/diff-material" ["defn" "diff-material" ["prev-material" "material" "coord" "collect!"] ["if" ["not=" [":kind" "prev-material"] [":kind" "material"]] ["collect!" ["[]" "coord" ":replace-material" "material"]] ["let" [["prev-keys" ["into" ["#{}"] ["keys" "prev-material"]]] ["curr-keys" ["into" ["#{}"] ["keys" "material"]]] ["added-material" ["->>" ["set/difference" "curr-keys" "prev-keys"] ["map" ["fn" ["k"] ["[]" "k" ["get" "material" "k"]]]]]] ["removed-keys" ["->>" ["set/difference" "prev-keys" "curr-keys"] ["into" ["#{}"]]]] ["updated-material" ["->>" ["set/intersection" "prev-keys" "curr-keys"] ["filter" ["fn" ["k"] ["not=" ["get" "prev-material" "k"] ["get" "material" "k"]]]] ["map" ["fn" ["k"] ["[]" "k" ["get" "material" "k"]]]] ["into" ["{}"]]]]] ["if" ["not" ["empty?" "added-material"]] ["collect!" ["[]" "coord" ":add-material" "added-material"]]] ["if" ["not" ["empty?" "removed-keys"]] ["collect!" ["[]" "coord" ":remove-material" "removed-keys"]]] ["if" ["not" ["empty?" "updated-material"]] ["collect!" ["[]" "coord" ":update-material" "updated-material"]]]]]], "main/states-ref" ["defonce" "states-ref" ["atom" ["{}"]]], "dsl.patch/update-params" ["defn" "update-params" ["coord" "op-data"] ["let" [["target" ["reach-object3d" "global-scene" "coord"]]] ["doseq" ["[]" "entry" "op-data"] ["let" [[["[]" "k" "v"] "entry"]] ["case" "k" [":x" [".setX" "target.position" "v"]] [":y" [".setY" "target.position" "v"]] [":z" [".setZ" "target.position" "v"]] [":scale-x" [".setX" "target.scale" ["scale-zero" "v"]]] [":scale-y" [".setY" "target.scale" ["scale-zero" "v"]]] [":scale-z" [".setZ" "target.scale" ["scale-zero" "v"]]] [":radius" ["set!" "target.geometry.radius" "v"]] ["do" [".log" "js/console" "|Unknown param change:" "k" "v"]]]]]]], "dsl.alias/line" ["defn" "line" ["props" "&" "children"] ["create-element" ":line" "props" "children"]], "dsl.object3d-dom/font-ref" ["defonce" "font-ref" ["do" ["let" [["loader" ["THREE.FontLoader."]]] [".load" "loader" "|hind.json" ["fn" ["response"] [".log" "js/console" "response"] ["@ref-dirty-call!"] ["reset!" "font-ref" "response"]]]] ["atom" ["js/THREE.Font." "nil"]]]], "main/renderer-ref" ["defonce" "renderer-ref" ["atom" "nil"]], "main/instants-ref" ["defonce" "instants-ref" ["atom" ["{}"]]], "util.core/shape?" ["defn" "shape?" ["x"] ["=" "Shape" ["type" "x"]]], "dsl.object3d-dom/create-box-element" ["defn" "create-box-element" ["params" "material" "event" "comp-coord"] ["let" [["geometry" ["js/THREE.BoxGeometry." [":width" "params"] [":height" "params"] [":depth" "params"]]] ["object3d" ["js/THREE.Mesh." "geometry" ["create-material" "material"]]]] [".set" "object3d.position" [":x" "params"] [":y" "params"] [":z" "params"]] [".set" "object3d.scale" ["scale-zero" [":scale-x" "params"]] ["scale-zero" [":scale-y" "params"]] ["scale-zero" [":scale-y" "params"]]] ["set!" "object3d.coord" "comp-coord"] "object3d"]], "dsl.render/get-state" ["defn" "get-state" ["states" "init-state" "args"] ["if" ["contains?" "states" "'data"] ["get" "states" "'data"] ["if" ["fn?" "init-state"] ["apply" "init-state" "args"] "nil"]]], "dsl.alias/camera" ["defn" "camera" ["props" "&" "children"] ["create-element" ":camera" "props" "children"]], "core/tree-ref" ["defonce" "tree-ref" ["atom" "nil"]], "util.core/collect-children" ["defn" "collect-children" ["element" "collect!"] [".forEach" "element.children" ["fn" ["child"] ["--" ".log" "js/console" "|Child:" "child"] ["collect!" "child"] ["if" ["some?" "child.children"] ["collect-children" "child" "collect!"]]]]], "dsl.alias/scene" ["defn" "scene" ["props" "&" "children"] ["create-element" ":scene" "props" "children"]], "dsl.diff/diff-tree" ["defn" "diff-tree" ["prev-tree" "tree" "coord" "collect!"] ["--" ".log" "js/console" "|Diffing:" "coord" "prev-tree" "tree"] ["cond" [["comp?" "prev-tree"] ["recur" [":tree" "prev-tree"] "tree" "coord" "collect!"]] [["comp?" "tree"] ["recur" "prev-tree" [":tree" "tree"] "coord" "collect!"]] [":else" ["if" ["some?" "prev-tree"] ["if" ["some?" "tree"] ["if" ["not=" [":name" "prev-tree"] [":name" "tree"]] ["collect!" ["[]" "coord" ":replace-element" ["purify-tree" "tree"]]] ["do" ["diff-params" [":params" "prev-tree"] [":params" "tree"] "coord" "collect!"] ["diff-material" [":material" "prev-tree"] [":material" "tree"] "coord" "collect!"] ["diff-events" [":event" "prev-tree"] [":event" "tree"] "coord" "collect!"] ["diff-children" [":children" "prev-tree"] [":children" "tree"] "coord" "collect!"]]] ["collect!" ["[]" "coord" ":remove-element"]]] ["if" ["some?" "tree"] ["collect!" ["[]" "coord" ":add-element" "tree"]] "nil"]]]]], "dsl.object3d-dom/create-point-light" ["defn" "create-point-light" ["params"] ["let" [["color" [":color" "params"]] ["intensity" [":intensity" "params"]] ["distance" [":distance" "params"]] ["object3d" ["js/THREE.PointLight." "color" "intensity" "distance"]]] [".set" "object3d.position" [":x" "params"] [":y" "params"] [":z" "params"]] ["--" ".log" "js/console" "|Light:" "object3d"] "object3d"]], "core/timestamp-ref" ["defonce" "timestamp-ref" ["atom" ["js/Date.now"]]]}, :namespaces {"comp.portal" ["ns" "quatrefoil.comp.portal" [":require" ["[]" "quatrefoil.dsl.alias" ":refer" ["[]" "create-comp" "group" "box" "sphere" "text"]]]], "dsl.patch" ["ns" "quatrefoil.dsl.patch" [":require" ["[]" "quatrefoil.dsl.object3d-dom" ":refer" ["[]" "global-scene" "build-tree"]] ["[]" "quatrefoil.util.core" ":refer" ["[]" "reach-object3d" "scale-zero"]]]], "dsl.diff" ["ns" "quatrefoil.dsl.diff" [":require" ["[]" "clojure.set" ":as" "set"] ["[]" "quatrefoil.util.core" ":refer" ["[]" "comp?" "shape?" "purify-tree"]]]], "comp.canvas" ["ns" "quatrefoil.comp.canvas" [":require" ["[]" "quatrefoil.dsl.alias" ":refer" ["[]" "create-comp" "group" "box" "sphere" "point-light" "perspective-camera" "scene" "text"]] ["[]" "quatrefoil.comp.todolist" ":refer" ["[]" "comp-todolist"]] ["[]" "quatrefoil.comp.portal" ":refer" ["[]" "comp-portal"]] ["[]" "quatrefoil.comp.back" ":refer" ["[]" "comp-back"]] ["[]" "quatrefoil.comp.fade-in-out" ":refer" ["[]" "comp-fade-in-out"]]]], "comp.back" ["ns" "quatrefoil.comp.back" [":require" ["[]" "quatrefoil.dsl.alias" ":refer" ["[]" "create-comp" "group" "box" "scene" "text"]]]], "util.core" ["ns" "quatrefoil.util.core" [":require" ["[]" "quatrefoil.types" ":refer" ["[]" "Component" "Shape"]]]], "comp.container" ["ns" "quatrefoil.comp.container" [":require" ["[]" "hsl.core" ":refer" ["[]" "hsl"]] ["[]" "respo-ui.style" ":as" "ui"] ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "canvas"]] ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]] ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]]], "types" ["ns" "quatrefoil.types"], "comp.todolist" ["ns" "quatrefoil.comp.todolist" [":require" ["[]" "quatrefoil.dsl.alias" ":refer" ["[]" "create-comp" "group" "box" "sphere" "point-light" "perspective-camera" "scene" "text"]]]], "main" ["ns" "quatrefoil.main" [":require" ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "falsify-stage!" "render-element" "gc-states!"]] ["[]" "quatrefoil.comp.container" ":refer" ["[]" "comp-container"]] ["[]" "cljs.reader" ":refer" ["[]" "read-string"]] ["[]" "quatrefoil.core" ":refer" ["[]" "render-canvas!" "tree-ref" "clear-cache!" "instant-variation-ref" "write-instants!"]] ["[]" "quatrefoil.comp.canvas" ":refer" ["[]" "comp-canvas"]] ["[]" "devtools.core" ":as" "devtools"] ["[]" "quatrefoil.dsl.object3d-dom" ":refer" ["[]" "camera-ref" "global-scene" "on-canvas-click" "ref-dirty-call!"]] ["[]" "quatrefoil.updater.core" ":refer" ["[]" "updater"]]]], "dsl.object3d-dom" ["ns" "quatrefoil.dsl.object3d-dom" [":require" ["[]" "quatrefoil.util.core" ":refer" ["[]" "purify-tree" "collect-children" "find-element" "scale-zero"]]]], "comp.fade-in-out" ["ns" "quatrefoil.comp.fade-in-out" [":require" ["[]" "quatrefoil.dsl.alias" ":refer" ["[]" "create-comp" "group" "box" "sphere" "text"]]]], "updater.core" ["ns" "quatrefoil.updater.core"], "core" ["ns" "quatrefoil.core" [":require" ["[]" "quatrefoil.dsl.render" ":refer" ["[]" "render-component"]] ["[]" "quatrefoil.dsl.diff" ":refer" ["[]" "diff-tree"]] ["[]" "quatrefoil.dsl.object3d-dom" ":refer" ["[]" "build-tree"]] ["[]" "quatrefoil.util.core" ":refer" ["[]" "purify-tree"]] ["[]" "quatrefoil.dsl.patch" ":refer" ["[]" "apply-changes"]]]], "dsl.alias" ["ns" "quatrefoil.dsl.alias" [":require" ["[]" "quatrefoil.types" ":refer" ["[]" "Shape" "Component"]] ["[]" "quatrefoil.util.core" ":refer" ["[]" "comp?" "shape?"]]]], "dsl.render" ["ns" "quatrefoil.dsl.render" [":require" ["[]" "quatrefoil.util.core" ":refer" ["[]" "comp?" "shape?" "=seq?" "=component?"]] ["[]" "clojure.set" ":as" "set"]]]}, :procedures {"comp.portal" [], "dsl.patch" [], "dsl.diff" [], "dsl" [], "comp.canvas" [], "comp.back" [], "util.core" [], "types" [], "comp.todolist" [], "main" [["reset!" "ref-dirty-call!" ["fn" [] ["js/setTimeout" "-main!" "100"]]]], "util.overwrite" [], "render.object3d-dom" [], "comp.fade-in-out" [], "updater.core" [], "comp-back" [], "alias" [], "core" [], "dsl.alias" [], "dsl.render" []}, :package "quatrefoil"}